# this opens the vm editor
F_VMEDITOR()
{
    echo "DEBUG: ********* $FUNCNAME entered *********"
    
    if [ -z "$TARGETVM" ];then
        echo " DEBUG: ERROR: No VM host selected?"
        F_MSG "ERROR" "ERROR ($OPERR) You haven't selected a target VM. Please try again\n"
        [ -z "$PARENTF" ]&&PARENTF=F_ESXMGR
        F_PARENTF $PARENTF
    fi
    F_GETCFG
    # add a progress bar because with perl SDK its fu..ing slow..
    PRGRSFILE="${PRGRSFILE}_vmeditor"
    tail -f $PRGRSFILE | $YAD --window-icon="$LOGO" --center --title="$TITLE (VM Editor)" --width=650 --progress --progress-text="Collecting and converting VM information..." --auto-kill --auto-close &
    echo 5 > ${PRGRSFILE}

    # check if VM is offline (again)
    unset PWRSTATE
    F_CHKPWR "$TARGETVM"
    echo "power is: $PWRSTATE"
    if [ "x${PWRSTATE}" == "xoff" ];then
      echo "DEBUG: Powerstate ok. going on..."
      echo 10 >> $PRGRSFILE
    else
      echo 100 >> $PRGRSFILE
      F_MSG "Oops state is $PWRSTATE. Well you cannot edit a VM when it is online or suspended.\nPlease turn the VM off and try again."
      exit
    fi
    echo 15 >> $PRGRSFILE
    unset VMEDIT VMEDERR
    if [ -z "$TARGETVM" ]||[ -z "$PTARGXML" ];then
            echo " DEBUG: ERROR: No VM host selected or XML file has gone.."
            MSG="ERROR ($OPERR) You haven't selected a target VM or the XML file has gone. try again\n"
            $YAD --window-icon="$LOGO" --title="$TITLE (Oops)" --on-top --center --text "$MSG" --image dialog-error --button="Back"
            echo 100 >> $PRGRSFILE
            exit
    fi
    echo 20 >> $PRGRSFILE

    TARGETVM=$TARGETVM F_GETDCS
    echo 50 >> $PRGRSFILE

    TARGETVM=$TARGETVM F_FETCHVMX
    if [ -f "$LOCDLVMX" ];then
        echo "DEBUG: local vmx file is here: $LOCDLVMX"
    else
        F_MSG "ERROR" "DEBUG: local vmx file $LOCDLVMX is missing!!! ABORTED."
        exit
    fi
    echo 70 >> $PRGRSFILE

    # array space separated VMX values we want to get and edit.
    # new vars needs to be also parsed in "present changeable data" section!
    # VAR = VMX variable
    # VARMAP= Name mapping for that variable
    # Both are needed and the "MAP" one will be shown in the Description
    RAMSIZE="memSize"
    RAMSIZEMAP="RAM in Megabytes"
    DNAME="displayName"
    DNAMEMAP="Display Name"
    ETH0NAME="ethernet0.networkName"
    ETH0NAMEMAP="Network (eth0)"
    RVNCPORT="RemoteDisplay.vnc.port"
    RVNCPORTMAP="Console Port"
    RVNCSTATE="RemoteDisplay.vnc.enabled"
    RVNCSTATEMAP="Uncheck to disable console for this VM"
    VCPUS="numvcpus"
    VCPUSMAP="Total CPU count (CPU core * socket)"
    VCPUSOCKET="cpuid.coresPerSocket"
    VCPUSOCKETMAP="Cores per socket"
  
    #ARRVMVARS=($RAMSIZE $DNAME $ETH0NAME $VCPUS $VCPUSOCKET $RVNCSTATE $RVNCPORT)
    ARRVMVARS=($RAMSIZE $DNAME $ETH0NAME $VCPUS $VCPUSOCKET)
    
    # order is important! new vars needs to be also parsed in "present changeable data" section!
    #ARRVMVARS=(memsize displayName ethernet0.networkName RemoteDisplay.vnc.port numvcpus)
  
    # get relevant data
    unset VMXVALG VMXVAL
    VMXARR=()
    for VMXVAL in $(echo ${ARRVMVARS[@]});do
        # parse XML and find matches
        VMXVALG=$(grep -i $VMXVAL $LOCNEWVMX)
        if [ ! -z "$VMXVALG" ];then
            echo "DEBUG: VMX arg $VMXVALG detected."
        else
            echo "DEBUG: VMX arg $VMXVAL NOT present."
            # special handling in case of CPU. if it is not defined it will be 1 CPU
            if [ "$VMXVAL" == "$VCPUS" ];then
                    VMXVALG="$VMXVAL = \"1\""
            else
                # special handling in case of CPU core per socket. if it is not defined it will be 1 core per socket
                if [ "$VMXVAL" == "$VCPUSOCKET" ];then
                    VMXVALG="$VMXVAL = \"1\""
                else                
                    VMXVALG="$VMXVAL = \"UNKNOWN\""
                fi
            fi
        fi
        if [ ! -z "$VMXARR" ];then
          VMXVAL=$(echo $VMXVALG| cut -d"=" -f1 |sed 's/[[:space:]].*$//g')
          VMXVALG=$(echo $VMXVALG| cut -d"=" -f2)
          if [ "$VMXVAL" == "$RVNCSTATE" ];then
              VMXVALG=$(echo $VMXVALG| cut -d"=" -f2|tr [[:lower:]] [[:upper:]])
          fi
          VMXARR=(${VMXARR[@]},$VMXVALG)
          echo "DEBUG: $VMXVALG added to array. Now: ${VMXARR[@]}"
        else
          VMXVALG=$(echo $VMXVALG| cut -d"=" -f2)
          VMXARR=($VMXVALG)
          echo "DEBUG: $VMXVALG added to a NEW array. Now: ${VMXARR[@]}"
        fi
    done
  echo 75 >> $PRGRSFILE
  unset RETEDIT
  # present changeable data
  while [ -z "$EDITANS" ];do
    # break out if aborted
    [ "$RETEDIT" == "222" ]||[ "$RETEDIT" == "252" ]&& break
    # else ask (again)
    echo "$TARGETVM" >$YADREST
    echo "${VMXARR[@]}" |tr -d '\"' | sed 's/,/\n/g' >> $YADREST
    sed -i 's/^[[:space:]]*//g' $YADREST

    # detect networks and VNC
    F_SCANNET
    echo 80 >> $PRGRSFILE
    F_DETECTVNC "$TARGETVM" "detectonly"
    echo 90 >> $PRGRSFILE
    unset FMVNCPORT FMVNCSTATE
    FMVNCPORT=$(grep "$RVNCPORT" $LOCNEWVMX)
    FMVNCSTATE=$(grep "$RVNCSTATE" $LOCNEWVMX |grep -i true)
    if [ $? -eq 0 ];then
      FMVNCSTATE="TRUE"
      FMVNCPORT=$(echo ${FMVNCPORT//*=/} | tr -d '"'|tr -d [[:space:]])
      FLVNCPORT="--field=Console-Port"
      RVNCSTATEMAP='Uncheck to disable'
    else
      FMVNCSTATE="FALSE"
      RVNCSTATEMAP='Check to enable'
      FMVNCPORT='auto'
    fi
    echo $FMVNCSTATE >> $YADREST
    echo $FMVNCPORT >> $YADREST

    # create a "yad array" for comparison for the current settings
    COMPPRE=($(cat $YADREST |tr "\n" "|"))
    echo 100 >> $PRGRSFILE
    
    echo "DEBUG: networks we about to present: $NETS"
    for net in $(echo "$NETS"|tr "|" "\n");do
        grep $net $YADREST
        [ $? -eq 0 ] && sed -i "s/$net/$net|$NETS/g" $YADREST && echo "DEBUG: added ESX networks to $YADREST"
    done
    
    # FIXME:
    # Spaces in Display Name need to be converted to underscores
    EDITANS=($($YAD --image="$LOGO_MAIN" --image-on-top --window-icon="$LOGO" --center --title="$TITLE (VM Editor)" --width=600 --form --item-separator="|"\
            --text "Edit the settings you want to change only:\n" \
            --field="Selected system":RO \
            --field="$RAMSIZEMAP":NUM \
            --field="$DNAMEMAP" \
            --field="$ETH0NAMEMAP":CBE\
            --field="$VCPUSMAP":NUM \
            --field="$VCPUSOCKETMAP":NUM \
            --field="$RVNCSTATEMAP console (Port: $FMVNCPORT):CHK" \
            --button="Validate changes":77 \
            --button="Cancel":1 \
            --rest="$YADREST" \
            --always-print-result))
    RETEDIT=$?

    # if user aborts or clicking on Go back button 
    if [ "$RETEDIT" -eq 252 ]||[ "$RETEDIT" -eq 222 ]||[ "$RETEDIT" -eq 1 ];then
      exit $RETEDIT
    fi

    # prepare "yad array" for comparison of the users answer
    EDITANSNAME=$(echo "${EDITANS}" | cut -d"|" -f3) # name
    EDITANSRAM=$(echo "${EDITANS}" | cut -d"|" -f2|cut -d"," -f1) # ram incl fix for NUM field!
    EDITANSNET=$(echo "${EDITANS}" | cut -d"|" -f4) # network name
    EDITANSCPU=$(echo "${EDITANS}" | cut -d"|" -f5|cut -d"," -f1) # number of cpus incl fix for NUM field!
    EDITANSCSOCK=$(echo "${EDITANS}" | cut -d"|" -f6|cut -d"," -f1) # number of cpu sockets incl fix for NUM field!
    EDITANSCONS=$(echo "${EDITANS}" |cut -d"|" -f7 ) # console state
    
    #create the "yad array" for comparison of the users answer
    CEDITANS=$(echo "$EDITANSNAME|$EDITANSRAM|$EDITANSNAME|$EDITANSNET|$EDITANSCPU|$EDITANSCSOCK|$EDITANSCONS|$FMVNCPORT|")
    
    echo "DEBUG: selected VM was $TARGETVM, answer was $RETEDIT settings was: $EDITANS" 
    echo "DEBUG: comparing previous settings:"
    echo "DEBUG: $COMPPRE <--- with ---> $CEDITANS"
    if [ "$COMPPRE" == "$CEDITANS" ];then
      echo "DEBUG: Nothing has changed!"
      UPLOADNEED=0
    else
        UPLOADNEED=1
        echo "DEBUG: There are changes"
        # parse answer and write it in an array
        # memsize displayName ethernet0.networkName RemoteDisplay.vnc.port
        # yad uses comma separated values when the NUM field is beeing used so we need to convert them..
        ARRNEWVMX=(memSize=\"$EDITANSRAM\" \
                    displayName=\"$EDITANSNAME\" \
                    ethernet0.networkName=\"$EDITANSNET\" \
                    numvcpus=\"$EDITANSCPU\"\
                    cpuid.coresPerSocket=\"$EDITANSCSOCK\"\
                    RemoteDisplay.vnc.enabled=\"$EDITANSCONS\"\
                    )
    fi
  done
if [ "$UPLOADNEED" == 1 ];then
  # Fetching ESX infos we need for validation
  https_proxy="" $XHOSTINF --server $SRV --sessionfile $AUTHSESS --fields memoryusage,memorysize,cpucores --machinereadable --fileoutput $XMLESX
  [ $? -ne 0 ] && F_MSG "ERROR while fetching ESX data for validation..ABORTED." && exit
  # search and replace the changed values within VMX
  for USRANS in "${ARRNEWVMX[@]}";do
    SRCHSTR="${USRANS//=*/}"
    VALSTR=$(echo "${USRANS//*=/}"|tr -d '"')
    echo "DEBUG: processing $SRCHSTR..."
    grep -i "$SRCHSTR" $LOCNEWVMX > /dev/null
    if [ $? -eq 0 ];then
      # special validations
      case "$SRCHSTR" in
        numvcpus)
              echo "DEBUG: Reached number of CPU validation..."
              MAXCPUNO=$($PYPARS --readxml -x $XMLESX -m xmltag -t CPUcores)
              #MAXCPUNO=$(https_proxy="" $XESXCLI --formatter=keyvalue --sessionfile $AUTHSESS --server=$SRV hardware cpu global get |grep -i Cpu.CPUCores|cut -d"=" -f2)
              echo "DEBUG: cpu count selected: $VALSTR. max cpu count: $MAXCPUNO"
              if [ "$VALSTR" -gt "$MAXCPUNO" ];then
                F_MSG "Oops. Unfortunately the number of CPUs seems to be limited to \n         $MAXCPUNO cores.\nYour choice will be adapted accordingly for your convenience."
                VALSTR="$MAXCPUNO"
              fi
              CPUCOUNT="$VALSTR"
              ;;
        cpuid.coresPerSocket)
              echo "DEBUG: Reached number of CPU core per socket validation..."
              MAXCPUNO=$($PYPARS --readxml -x $XMLESX -m xmltag -t CPUcores)
              #MAXCPUNO=$(https_proxy="" $XESXCLI --formatter=keyvalue --sessionfile $AUTHSESS --server=$SRV hardware cpu global get |grep -i Cpu.CPUCores|cut -d"=" -f2)
              echo "DEBUG: cpu count selected: $CPUCOUNT and cores per socket: $VALSTR"
              echo "DEBUG: Lets check if that makes sense..."
              #ALLOWEDSOCK="$(echo "scale=0; \$CPUCOUNT / \$VALSTR" | bc)"
              UVALSTR=$VALSTR
              let CALLOWEDSOCK="$CPUCOUNT/$VALSTR"
              echo "DEBUG: max allowed by your total cpu count = $CALLOWEDSOCK"
              if [ $CALLOWEDSOCK == 0 ];then F_MSG "Oops you selected more cores per socket than total cpus available!!\nwill set max core per socket to 1." ; VALSTR=1;fi

              let MALLOWEDSOCK="$MAXCPUNO/$VALSTR"
              let MALLOWEDSOCCPU="$MALLOWEDSOCK*$VALSTR"
              echo "DEBUG: max allowed by total available = $MALLOWEDSOCK"

              if [ "$VALSTR" -gt "$CALLOWEDSOCK" ];then
                F_PARENTF F_VMEDITOR
                F_MSG "ERROR" "CPU cores per socket (your choice): $UVALSTR\nTotal CPUs (your choice): $CPUCOUNT\nTotal CPUs (max available): $MAXCPUNO\n\nDepending on the current total cpu count (see above) your max allowed core per socket value is $MALLOWEDSOCK (results in a total of $MALLOWEDSOCCPU CPUs).\n\nABORTED.\n\nTry again the calculation is easy:\n\ntotal cpu count ($MAXCPUNO) / your-choice = max cores per socket     \n\n(rounding to 1 digit of course).\n"
                exit
              fi
              ;;              
        memSize)
              echo "DEBUG: Reached number of RAM validation..."
              PHYMEM=$($PYPARS --readxml -x $XMLESX -m xmltag -t PhysicalMemory)
              USEDMEM=$($PYPARS --readxml -x $XMLESX -m xmltag -t MemoryUsage)
              MAXMEM=$((${PHYMEM// MB/} - ${USEDMEM// MB/}))
              if [ "$VALSTR" -gt "$MAXMEM" ];then
                F_MSG "Oops. Unfortunately the size of RAM seems to be limited to \n         $MAXMEM MB.\nYour choice will be adapted accordingly for your convenience."
                VALSTR="$MAXMEM"
              fi
              ;;
        RemoteDisplay.vnc.enabled)
              # this will only prepare the console handling not do anything. 
              # enable/disable console will be done after uploading first.
              echo "DEBUG: Reached VNC Console validation..."
              VALSTR=$(echo $VALSTR|tr [[:lower:]] [[:upper:]])
              if [ "$FMVNCSTATE" != "$VALSTR" ];then
                  echo "DEBUG: console setting has changed from $FMVNCSTATE to $VALSTR"
                  if [ "$VALSTR" == "TRUE" ];then
                      echo "DEBUG: console will be enabled now"
                      DISABLEC=1
                  else
                      echo "DEBUG: console will be disabled now"
                      DISABLEC=2
                  fi
              else
                  echo "DEBUG: console setting has not changed"
                  DISABLEC=0
              fi
              ;;
      esac
      sed -i "s/$SRCHSTR.*/${SRCHSTR}\ =\ \"$VALSTR\"/g" $LOCNEWVMX
    else
      echo "$USRANS" >> $LOCNEWVMX
    fi
  done
  unset LVMX LANS
  # validate changed settings
  # Must be done by the user.. May changing in the future but atm..
  while [ -z "$LANS" ];do
          LVMX=$(cat "$LOCNEWVMX" | $YAD --image="$LOGO_MAIN" --image-on-top --window-icon="$LOGO" --title="$TITLE (Check VMX)" \
                    --center --width=600 --height=800 --text \
                    "\nThe following will show you the VMX file we about to upload.\nPlease check that it matches your needs and its correctness.\n\nYou can <span font_weight='bold'>not</span> edit only <span font_weight='bold'>view:</span>\n" \
                    --list --column=xml-file --no-headers \
                    --button="Upload":33 \
                    --button="Cancel":34 \
                    --always-print-result)
          LANS=$?
          echo "DEBUG: selected button id: $LANS"
          if [ "$LANS" -eq 252 ]||[ "$LANS" -eq 34 ];then
            echo "DEBUG: aborted by user" 
            exit
          fi
  done
  
  if [ "$LANS" -eq 33 ];then
    # check if VM is offline (again)
    unset PWRSTATE
    F_CHKPWR $TARGETVM
    echo "power is: $PWRSTATE"
    if [ "x${PWRSTATE}" == "xoff" ];then
      echo "going on..."
    else
      F_MSG "Oops state is $PWRSTATE. My friend you cannot edit a VM when it is online or suspended.\nPlease turn the VM off and try again."
      exit
    fi
    # upload changed settings
    https_proxy="" $XFILEACC --sessionfile $AUTHSESS --server $SRV --datacentername ha-datacenter --operation put --filetype datastore --datastorename "$XMLSTOR" --remotepath "$XMLVMX" --localpath "$LOCNEWVMX"
    if [ $? -eq 0 ];then
      F_MSG "Congratulations. VM settings changed successfully.\n\nHINT:\nYou need to boot the VM to see the changed settings in vEMan."
      # setup console according to the above validation result
      if [ "$DISABLEC" == 1 ];then
          echo "DEBUG: Enable console as it was disabled before"
          F_ENABLEVNC
      else
          if [ "$DISABLEC" == 2 ];then
              echo "DEBUG: Disable console as it was enabled before"
              F_DISABLEVNC
          else
              echo "DEBUG: no console action required"
          fi
      fi
    else
      # backup the original data to a persistent location name
      cp -f $LOCDLVMX ${LOCDLVMX}_ORIGINALFILE
      F_MSG "ERROR: There was an error while uploading the new settings!\nDon't worry a backup of the previous VMX can be found here:\n\n${LOCDLVMX}_ORIGINALFILE"
    fi
  else
    F_MSG "DEBUG: oops very unusual! Check $FLOG!"
    exit
  fi
  # TODO: flush vEMan caches!
else
    F_MSG "Nothing changed so no upload anything."
fi
}
export -f F_VMEDITOR
