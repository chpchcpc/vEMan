# Deploy OVF and/or VMX
F_DEPLOVF()
{
    echo "DEBUG: ********* $FUNCNAME entered *********"
    
	unset OVFNM VERSRC
    F_GETCFG
    ERROVF1="-1"
	[ -z "$LASTNET" ]&& LASTNET="type-in-exact-NETWORK-name"
	[ -z "$LASTSTORE" ]&& LASTSTORE="type-in-exact-STORAGE-name"
	
	F_SCANDS
	F_SCANNET

	echo "DEBUG: Set to initial values"
    while [ -z "$OVFSRC" ]||[ -z "$OVFNET" ]||[ -z "$OVFDS" ]||[ "$ERROVF1" -eq "-1" ];do
            OVFCFG=$($YAD --image="$LOGO_MAIN" --image-on-top --window-icon="$LOGO" --center --title="$TITLE (Deploy OVA/OVF/VMX)" --width=850 --form --item-separator="|" \
                            --text "OVA/OVF/VMX deployment" \
                            --field="OVA/OVF/VMX source (type in URL or browse to local file)":SFL "$LASTSOURCE" \
                            --field="Target ESX server":SFL "$SRV" \
                            --field="Target 'Network Name'":CBE "$NETS" \
                            --field="Target 'Data Storage'":CBE "$STORES" \
                            --field="Autoaccept EULA":RO "EULA will be AUTO-accepted" \
                            --field="Power on after deployed":CHK \
                            --always-print-result)
            ERROVF1="$?"
            echo "DEBUG: OVFCFG exit result was: $ERROVF1"
            if [ "$ERROVF1" -eq 1 ]||[ "$ERROVF1" -eq 252 ];then
                $PARENTF
            fi              

            OVFSRC=$(echo "$OVFCFG" | cut -d "|" -f 1)
            OVFDEST=$(echo "$OVFCFG" | cut -d "|" -f 2)
            OVFNET="$(echo \"$OVFCFG\" | cut -d '|' -f 3)"
            OVFDS=$(echo "$OVFCFG" | cut -d "|" -f 4| cut -d "(" -f1)
            OVFEULA=$(echo "$OVFCFG" | cut -d "|" -f 5)
            OVFPWR=$(echo "$OVFCFG" | cut -d "|" -f 6)
    done
        
    echo "DEBUG: $OVFSRC , $OVFDEST , $OVFNET , $OVFDS , $OVFEULA , $OVFPWR"

	# save the current entered values into server specific settings file
	F_SAVEOVFSET

        if [ ! -z "$OVFDEST" ];then
                        OVFDEST="vi://${OVFDEST}/"
        fi

# We need to autoaccept all EULAs atm! Otherwise deployment will not work when an EULA exists.
        MSG="EULAs of an OVF/OVA will be autoaccepted!\n\nEnsure that you have read the license agreement of the appliance carefully and that you can accept it's content!\n\n"
        $YAD --image="$LOGO_MAIN" --image-on-top --window-icon="$LOGO" --title="$TITLE (Hint)" --on-top --center --text "$MSG" --button=Cancel:3 --button="I accept the EULA of the appliance":5
        if [ $? -eq 5 ];then
            ACPTEULA="--acceptAllEulas"
            echo "DEBUG: user accepted appliance EULA"
        else
            echo "DEBUG: deploying aborted because user do not want to accept the EULA!"
            $PARENTF
        fi
            
        if [ "$OVFPWR" == "TRUE" ];then
                PWRON="--powerOn"
        fi

        YANS=0
        while [ -z "$OVFNM" ]||[ -z "$OVFHDD" ];do
            OVFPROP=$($YAD --image="$LOGO_MAIN" --image-on-top --window-icon="$LOGO" --center --title="$TITLE (Configure OVF)" --width=650 --form --item-separator="#" \
                    --text "OVF / VMX deployment" \
                    --field="Type in a name for your new VM" "" \
                    --field="Choose your target disk type\n (thin and thick are valid for ESX(i)/VI only)":CB \
                            "thin#thick#monolithicSparse#monolithicFlat#twoGbMaxExtentSparse#twoGbMaxExtentFlat#twoGbMaxExtentSparse#streamOptimized" \
                    --field="Enable console? (recommended)":CHK TRUE \
                    )
            RETVALI=$?
            echo "DEBUG: answer was: $RETVALI"
            if [ $RETVALI -ne 0 ];then
                echo "DEBUG: deploying canceled by user request!"
                $PARENTF
            fi              

    		# we will convert spaces within the VM name..
            OVFNM=$(echo "$OVFPROP"| cut -d "|" -f1 |tr " " "_" )
            OVFHDD=$(echo "$OVFPROP" | cut -d "|" -f 2)
            OVFVNC="$(echo "$OVFPROP" | cut -d "|" -f 3)"

            echo "DEBUG: $OVFNM $OVFHDD $OVFVNC $ACPTEULA $PWRON ${OVFDEST}"
        done

        # This will create the local ovftool config file which is needed to avoid problems when parsing
        F_MKOVFCFG

	# The most common mistake or faulty crap happens because of a wrong/invalid source.
	# Either the source is not valid (e.g. not OVF/VMX) or is not reachable over the internet.
	# So the following check ensures that the source can be read before proceeding the ovf import.
	# This will not completely solve faulty imports but it's 1 step further on the way to handle OVF import probs.
    echo "$OVFSRC" |grep -i 'vmx\|ovf' >> /dev/null
    FFRES=$?
    if [ $FFRES -eq 0 ];then 
        all_proxy="" ALL_PROXY="" http_proxy="" https_proxy="" $XOVFTOOL --schemaValidate "$OVFSRC"
        VERSRC=$?
    else
        VERSRC=999
        echo "DEBUG: Source is invalid ($OVFSRC)!!"
    fi
    echo "DEBUG: VERSRC was: >$VERSRC<"
    if [ "$VERSRC" -ne 0 ];then
        echo "DEBUG: Oops - cannot proceed because the source >$OVFSRC< is not valid! Check log"
        echo "DEBUG: or use this command to find out more: >http_proxy="" https_proxy="" ovftool $OVFSRC<"

        VAMSG="$(all_proxy="" ALL_PROXY="" http_proxy="" https_proxy="" $XOVFTOOL --schemaValidate "$OVFSRC" 2>&1)"
        echo "$VAMSG"| $YAD --window-icon="$LOGO" --title="$TITLE (ERROR)" --on-top --center --image dialog-error --selectable-labels --list --column=output --no-headers\
            --width=800 --height=600 \
            --text "Cannot proceed because the source is not valid.\n\nThe command used:\n\nhttp_proxy=\"\" https_proxy=\"\" $XOVFTOOL --schemaValidate \"$OVFSRC\"\n\nThe output:\n" \
            --button Close
        F_ESXMGR
    else
        echo "DEBUG:the source >$OVFSRC< is valid" 
    fi
        
    # Hint: with ovftool 2.1 it expects the pw WITHIN the command (no echo pipe..) but this is not good 
	# when the pw contains special chars
	# Another problem when NOT using --machineOutput is that the progress bar will never work!!!!!
	# Another hint: This all fail in my test when splitting the one line to multiple ones..
    # oh man bash is really great: now I'm able to catch every error I want by using PIPESTATUS...
    echo -e "${VUSER}\n${DPASS}" | all_proxy="" ALL_PROXY="" http_proxy="" https_proxy="" $XOVFTOOL $PWRON --machineOutput \
                $ACPTEULA "$OVFSRC" $OVFDEST 2>&1| sed -nu 's/.*rogress:\ \([0-9]\{1\}[0-9]\{0,1\}[0]\{0,1\}\)$/\1/p' | $YAD --center --window-icon="$LOGO" --title="$TITLE (Deploying VM)" --width=650 --progress --progress-text="Deploying \"${OVFNM}\"" --auto-kill --auto-close \
                | tee ; ( exit ${PIPESTATUS[1]} )
    
    # error handling
    if [ $? -ne 0 ];then
        $YAD --window-icon="$LOGO" --title="$TITLE (ERROR)" --on-top --center --image dialog-error --selectable-labels \
            --width=800 --height=300 \
            --text "Deploying ${OVFNM} ended with an error!\n\nThe command used:\n\nall_proxy=\"\" ALL_PROXY=\"\" http_proxy=\"\" https_proxy=\"\" $XOVFTOOL --machineOutput $ACPTEULA $OVFSRC $OVFDEST\n\nIf you like I can execute it again to show you the error message. This is not done automatically because some errors occur after uploading and I do not want you to wait again for generating the error output..\n" \
            --button=Close:1 --button="Catch error":3
        if [ $? -eq 3 ];then
            echo 100 >> $PRGRSFILE
            echo 1 > $PRGRSFILE
            tail -f $PRGRSFILE | $YAD --window-icon="$LOGO" --center --title="$TITLE (Catch deploy error)" --width=650 --progress --progress-text="Executing deploy again to catch the error..." --auto-kill --auto-close &
            OMSG="$(echo -e "${VUSER}\n${DPASS}" | all_proxy="" ALL_PROXY="" http_proxy="" https_proxy="" $XOVFTOOL $PWRON --machineOutput $ACPTEULA "$OVFSRC" $OVFDEST 2>&1)"
            echo "DEBUG: OMSG was: $OMSG"
            echo 100 >> $PRGRSFILE
            rm $PRGRSFILE
            echo "$OMSG"| $YAD --window-icon="$LOGO" --title="$TITLE (ERROR)" --on-top --center --image dialog-error --selectable-labels --list --column=output --no-headers \
                --width=800 --height=600 \
                --text "Deploy command used:\n\nall_proxy=\"\" ALL_PROXY=\"\" http_proxy=\"\" https_proxy=\"\" $XOVFTOOL --machineOutput $ACPTEULA $OVFSRC $OVFDEST\n\nThe output:\n\n" \
                --button=Close
        fi            
        F_ESXMGR
    else
        echo "DEBUG: Deploying OVA/OVF/VMX succeeded."
        MSG=" Deploying \n\n \"${OVFNM}\"\n\n to $SRV ended successfully."
        $YAD --image="$LOGO_MAIN" --image-on-top --window-icon="$LOGO" --title="$TITLE (OVA/OVF/VMX deployed)" --on-top --center --width=400 --text "$MSG" --button=Close	
        if [ "$OVFVNC" == "TRUE" ];then
            TARGETVM="$OVFNM"
            F_ENABLEVNC
        fi
    fi
}

export -f F_DEPLOVF
